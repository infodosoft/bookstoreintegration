name: CI with Tag Filtering and Allure Report

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tags to Run (e.g., @Books, @Authors)'
        required: false
        default: '@AllAPIs'
      env:
        description: 'Test environment'
        required: false
        default: 'QA'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      ALLURE_RESULTS_DIR: allure-results
      ALLURE_REPORT_DIR: allure-report

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Restore Allure History from Previous Build
      - name: Download Allure History Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: previous-history
        continue-on-error: true

      - name: Prepare Allure History Folder
        run: |
          mkdir -p $ALLURE_RESULTS_DIR/history
          if [ -d "previous-history/history" ]; then
            cp -r previous-history/history/* $ALLURE_RESULTS_DIR/history/ || true
          fi

      # Generate Allure Metadata Files (environment.properties, executor.json, categories.json)
      - name: Generate Allure Metadata Files
        run: |
          mkdir -p $ALLURE_RESULTS_DIR

          echo "Environment=${{ github.event.inputs.env }}" >> $ALLURE_RESULTS_DIR/environment.properties
          echo "ENV=${{ github.event.inputs.env }}" >> $ALLURE_RESULTS_DIR/environment.properties
          echo "OS=Ubuntu" >> $ALLURE_RESULTS_DIR/environment.properties

          cat <<EOF > $ALLURE_RESULTS_DIR/executor.json
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "#${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

          cat <<EOF > $ALLURE_RESULTS_DIR/categories.json
          [
            {
              "name": "Product Defects",
              "matchedStatuses": ["failed"],
              "messageRegex": ".*AssertionError.*"
            },
            {
              "name": "Flaky Tests",
              "matchedStatuses": ["broken"],
              "traceRegex": ".*TimeoutException.*"
            }
          ]
          EOF

      - name: Run Tests by Tags
        run: mvn clean test -Dcucumber.filter.tags="${{ github.event.inputs.tags }}" -Denv="${{ github.event.inputs.env }}"

      - name: Install Allure CLI
        run: |
          curl -Lo allure.tgz https://github.com/allure-framework/allure2/releases/download/2.34.1/allure-2.34.1.tgz
          tar -xzvf allure.tgz
          sudo mv allure-2.34.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure Report
        run: |
          allure generate $ALLURE_RESULTS_DIR --clean -o $ALLURE_REPORT_DIR

      # Upload Allure Report as Artifact
      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ${{ env.ALLURE_REPORT_DIR }}

      # Upload Allure History for Next Build Trend
      - name: Upload Allure History Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.ALLURE_REPORT_DIR }}/history

      # Deploy Allure Report to GitHub Pages (on main branch)
      - name: Deploy Allure Report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./${{ env.ALLURE_REPORT_DIR }}
